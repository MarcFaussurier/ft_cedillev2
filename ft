#ifndef FT_H
# define FT_H
# include <stdio.h>
# include <stdlib.h>
# include <unistd.h>
# include <fcntl.h>
# include <string.h>
# include <ctype.h>
# include <sys/stat.h>
# include <sys/types.h>
# include <sys/stat.h>
# define auto __auto_type
# define __(...) #__VA_ARGS__

typedef struct {int i; char*s;} rule;

# define macro	

int	is_token(int remaining, char *begin, char *word)
{
	int	i;

	i = 0;
	while (remaining > i && word[i] && begin[i] == word[i])
		i += 1;
	if (!word[i])
		return (1);
	return (0);
}

int	is_word(int remaining, char *begin, char *word)
{
	int	i;

	i = 0;
	while (remaining > i && word[i] && begin[i] == word[i])
		i += 1;
	if (!word[i] && !isalpha(begin[i]))
		return (1);
	return (0);
}


static void mkpath(const char *dir);
static void mkpath(const char *dir)
{
    char tmp[256];
    char *p = NULL;
    size_t len;

    snprintf(tmp, sizeof(tmp),"%s",dir);
    len = strlen(tmp);
    if (tmp[len - 1] == '/')
        tmp[len - 1] = 0;
    p = tmp + 1;
	while(*p)
	{
        if (*p == '/')
		{
            *p = 0;
            mkdir(tmp, S_IRWXU);
            *p = '/';
        }
		p += 1;
	}
}

typedef struct s_list
{
	void			*data;
	struct s_list	*next;
}	t_list;

void	list_add(void *listd, void *data)
{
	t_list	*it;
	t_list	**list;

	list = (void*) listd;
	it = *list;
	if (!it)
	{
		it = malloc(sizeof(t_list));
		it->next = 0;
		it->data = data;
		*list = it;
		return ;
	}
	while (it->next)
		it = it->next;
	it->next = malloc(sizeof(t_list));
	it->next->next = 0;
	it->next->data = data;
}

void	list_clear(t_list **list, void (*f)(void*))
{
	t_list	*it;
	t_list	*swp;

	it = *list;
	while (it)
	{
		swp = it->next;
		if (f)
			f(it->data);
		free(it);
		it = swp;
	}
}

#endif
